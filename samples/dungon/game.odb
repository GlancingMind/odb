-------------------------------------------------------------------------------
--                                                                           --
--  Filename        : $Source: /cvsroot/gnade/odb/samples/dungon/game.odb,v $
--  Version         : $Revision: 1.9 $                                       --
--  Description     : ODB Database connection                                --
--  Author          : Michael Erdmann <Michael.Erdmann@snafu.de>             --
--  Created On      : 21-June-2003                                           --
--  Last Modified By: $Author: merdmann $				     --
--  Last Modified On: $Date: 2003/07/07 18:53:58 $                           --
--  Status          : $State: Exp $                                          --
--                                                                           --
--  Copyright (C) 2003 Michael Erdmann                                       --
--                                                                           --
--  ODB is free software;  you can redistribute it  and/or modify it under   --
--  terms of the  GNU General Public License as published  by the Free Soft- --
--  ware  Foundation;  either version 2,  or (at your option) any later ver- --
--  sion.  ODB is distributed in the hope that it will be useful, but WITH-  --
--  OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
--  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
--  for  more details.  You should have  received  a copy of the GNU General --
--  Public License  distributed with GNAT;  see file COPYING.  If not, write --
--  to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
--  MA 02111-1307, USA.                                                      --
--                                                                           --
--  As a special exception,  if other files  instantiate  generics from this --
--  unit, or you link  this unit with other files  to produce an executable, --
--  this  unit  does not  by itself cause  the resulting  executable  to  be --
--  covered  by the  GNU  General  Public  License.  This exception does not --
--  however invalidate  any other reasons why  the executable file  might be --
--  covered by the  GNU Public License.                                      --
--                                                                           --
--  Functional Description                                                   --
--  ======================                                                   --
--  This object represents the connection to a database.                     --
--                                                                           --
--  Restrictions                                                             --
--  ============                                                             --
--  R.1 -                                                                    --
--                                                                           --
--  References                                                               --
--  ==========                                                               --
--  None                                                                     --
--                                                                           --
-------------------------------------------------------------------------------
with Ada.Exceptions;           			use Ada.Exceptions;
with Ada.Text_IO;				use Ada.Text_IO;

with ODB.Collection;				use ODB.Collection;
with ODB.Entity;				use ODB.Entity;
use  ODB;

with Player;					use Player;
with Room;					use Room;

package body Game is

   Version : constant String := "$Id: game.odb,v 1.9 2003/07/07 18:53:58 merdmann Exp $";

   type Handle is access all Object;

   ----------------
   -- Write_Maze --
   ----------------
   procedure Write_Maze(
      Stream : access Root_Stream_Type'Class;
      Item   : in Maze_Type ) is
   begin
      for i in 1..Maze_Size loop
         for j in 1..Maze_Size loop
	    Reference'Output( Stream, Item(i,j) );
	 end loop;
      end loop;
   end Write_Maze;

   ---------------
   -- Read_Maze --
   ---------------
   function Read_Maze(
      Stream : access Root_Stream_Type'Class ) return Maze_Type is
      Item   : Maze_Type ;
   begin      
      for i in 1..Maze_Size loop
         for j in 1..Maze_Size loop
	    Item( i, j ) := Reference'Input( Stream );
	 end loop;
      end loop;
      return Item;
   end Read_Maze;

   ----------
   -- Game --
   ----------
   function Game(
      This : in Reference ) return Handle is
      -- Verify, that a correct object reference is passed and return the
      -- handle
   begin
      if This = null then
         Raise_Exception(Invalid_Object'Identity, "GAME - null reference" );
      end if;         
      if This.all'Tag /= Object'Tag then
         Raise_Exception(Invalid_Object'Identity, External_Tag(This.all'Tag) );
      end if;

      return Handle( This );
   end Game;

   ------------------
   -- Current_Room --
   ------------------
   function Current_Room( 
      This    : in Reference;
      APlayer : in Reference ) return Reference is 
      -- get the room, where the player is located
      G       : Handle := Game( This );
      X,Y     : Natural;
   begin
      Player.Get_Position( APlayer, X, Y );
      return G.Maze( X,Y );
   end Current_Room;

   ------------
   -- Create --
   ------------
   function Create(
      Name    : in String ) return Reference is 
      -- create a new game
      RefName : String := "Game." & Name;
      G       : Handle := Handle( Lookup_Object( RefName ) );
      Result  : Reference ;
   begin
      if G = null then
         Result := new Object;

	 G := Handle( Result );
	 Name_Object( Reference(G), RefName );

         G.Name    := To_Unbounded_String( Name );
         G.Players := Collection.Create( Name & ".Players" );

	 for i in 1..Maze_Size loop
	    for j in 1..Maze_Size loop
	       G.Maze(i,j) := Room.Create( 
	             RefName & Natural'Image(i) & Natural'Image(j));
	    end loop;
	 end loop;

      else
         Result := Reference(G);
      end if;

      return Result;
   end Create; 

   ----------------
   -- Add_Player --
   ----------------
   function Add_Player( 
      This   : in Reference;
      Name   : in String ) return Reference is
      -- Add a new player to the game
      G      : Handle := Game( This );
      P      : Element_Array_Access := Contents( G.Players );
      Result : Reference := null;
   begin
      if P /= null then
         for i in P.all'Range loop
            if P(i) /= null and then To_String( Player.Name(P(i)) ) = Name then
	       Result := P(i);
      	       exit;
            end if;
         end loop;
         Free(P);
      end if;

      if Result = null then
         Result := Player.Create( Name );
	 Player.Set_Position( Result, 1, 1);
         Add( G.Players, Result );
      end if;

      return Result;
   end Add_Player;

   -------------
   -- Display --
   -------------
   procedure Display_Game(
      This    : in Reference ) is
      -- display the global status of the game
      G       : Handle := Game( This );
      Players : Element_Array_Access := Contents( G.Players );
   begin
      Put_Line("");
      Put_Line("Welcome to the " & To_String(G.Name) & " world." );
      Put_Line("");

      if Players /= null then
         Put_Line("The following persons are also here: " );
	 Put_Line("");
         for i in Players'Range loop
            if Players(i) /= null then
               Put_Line( "   " & To_String(Player.Name( Players(i) ) ) );
	    end if;
         end loop;
	 Put_Line("");
      end if;
      Put_Line("");
      Put_Line("");
   end Display_Game;

   ----------------------
   -- Display_Location --
   ----------------------
   procedure Display_Location(
      This    : in Reference;
      APlayer : in Reference ) is 
      -- display the room where the player is in.
      G       : Handle := Game( This );
      X,Y     : Natural;
   begin 
      Player.Get_Position( APlayer, X, Y );
      Room.Display( G.Maze( X,Y ) );
   end Display_Location;

   ----------
   -- Move --
   ----------
   procedure Move(
      This    : in Reference;
      APlayer : in Reference;	   
      DX,DY   : in Integer ) is
      -- move the player in the field. 
      G      : Handle := Game( This );
      X,Y    : Natural;

      function Wrap( X : in Natural ) return Natural is 
         X1  : Natural;
      begin      
         if X > Maze_Size then
	    X1 := 1;
	 elsif X =  0 then
            X1 := Maze_Size;
	 else 
	    X1 := X;
         end if;

	 return X1;
      end Wrap;

      Door : Door_ID ;

   begin
      Player.Get_Position( APlayer, X, Y );

      if DX = -1 then
         Door := Left;
      elsif DX = 1 then
         Door := Right;
      elsif DY = -1 then
         Door := Back;
      else 
         Door := Front;
      end if;

      if Door_Open( G.Maze( X, Y ), Door ) then
         X := Wrap( X + DX );
         Y := Wrap( Y + DY );
	 Put_Line( Integer'Image(X) & Integer'Image(Y) );
      else
         raise Invalid_Move ;
      end if;

      Player.Set_Position( APlayer, X, Y );
   end Move;

   --------------------
   -- Drop an object --
   --------------------
   procedure Drop( 
      This    : in Reference;
      APlayer : in Reference;
      Item    : in Unbounded_String ) is
      -- drop an item in the room
      G       : Handle := Game( This );
      X,Y     : Natural;
   begin
      Player.Get_Position( APlayer, X, Y );
      Room.Items( G.Maze( X,Y ), Item );
   end Drop;

   ----------------
   -- Claim_Room --
   ----------------
   procedure Claim_Room(
      This    : in Reference;
      APlayer : in Reference ) is
      -- try to claim the room for the current player
      G       : Handle := Game( This );
      Owner   : Reference;
      Name    : String( 1..200 );
      Length  : Integer := 0;
      Current : Reference := Current_Room( This, APLayer );
   begin
      Owner := Room.Owner(Current);
      if Owner = null then
         Room.Owner( Current, APlayer );
      else
         Put_Line( "The room is already owned by " &  To_String(Player.Name( Owner )) );
	 return;
      end if;
      Put_Line("Name your room: ");
      Get_Line( Name, Length );
      Room.Name( Current, Name( 1..Length ) );
   end Claim_Room;

   ---------------
   -- Is_Object --
   ---------------
   function Is_Object(
      This    : in Reference;
      APlayer : in Reference;
      Name    : in Unbounded_String ) return Boolean is 
      Object  : constant String := To_String( Name );
      Current : Reference := Current_Room( This, APLayer );
      O       : Element_Array_Access := Contents( Room.Items(Current) );
      Result  : Boolean := False;
   begin
      if O /= null and then O'Last > 0 then
         for i in O'Range loop
	    if Entity.Name(O(i)) = Object then
	       Result := True;
	       exit;
	    end if; 
	 end loop;
      end if;
      
      Free( O );
      return Result;
   end Is_Object;
   
   -------------------
   -- Set_Attribute --
   -------------------
   procedure Set_Attribute( 
      This      : in Reference ;
      APlayer   : in Reference;
      Name      : in Unbounded_String;
      Attribute : in Unbounded_String;
      Value     : in Unbounded_String ) is 

      Object    : constant String := To_String( Name );
      Current   : Reference := Current_Room( This, APLayer );
      O         : Element_Array_Access := Contents( Room.Items(Current) );
      Result    : Reference := null;
   begin
      if O /= null and then O'Last > 0 then
         for i in O'Range loop
	    if Entity.Name(O(i)) = Object then
	       Result := O(i);
	       exit;
	    end if; 
	 end loop;
      end if;
      Free( O );

      if Result = null then
         Put_Line("Object " & Object & " not found!");
	 return;
      end if;

      Entity.Attribute( Result, To_String(Attribute), NUll);
   end Set_Attribute;

begin	
   Register_Object;
end Game;
