-------------------------------------------------------------------------------
--                                                                           --
--  Filename        : $Source: /cvsroot/gnade/odb/samples/dungon/room.odb,v $
--  Version         : $Revision: 1.7 $                                       --
--  Description     : ODB Database connection                                --
--  Author          : Michael Erdmann <Michael.Erdmann@snafu.de>             --
--  Created On      : 21-June-2003                                           --
--  Last Modified By: $Author: merdmann $				     --
--  Last Modified On: $Date: 2003/07/07 18:53:58 $                           --
--  Status          : $State: Exp $                                          --
--                                                                           --
--  Copyright (C) 2003 Michael Erdmann                                       --
--                                                                           --
--  ODB is free software;  you can redistribute it  and/or modify it under   --
--  terms of the  GNU General Public License as published  by the Free Soft- --
--  ware  Foundation;  either version 2,  or (at your option) any later ver- --
--  sion.  ODB is distributed in the hope that it will be useful, but WITH-  --
--  OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
--  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
--  for  more details.  You should have  received  a copy of the GNU General --
--  Public License  distributed with GNAT;  see file COPYING.  If not, write --
--  to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
--  MA 02111-1307, USA.                                                      --
--                                                                           --
--  As a special exception,  if other files  instantiate  generics from this --
--  unit, or you link  this unit with other files  to produce an executable, --
--  this  unit  does not  by itself cause  the resulting  executable  to  be --
--  covered  by the  GNU  General  Public  License.  This exception does not --
--  however invalidate  any other reasons why  the executable file  might be --
--  covered by the  GNU Public License.                                      --
--                                                                           --
--  Functional Description                                                   --
--  ======================                                                   --
--  This object represents the connection to a database.                     --
--                                                                           --
--  Restrictions                                                             --
--  ============                                                             --
--  R.1 -                                                                    --
--                                                                           --
--  References                                                               --
--  ==========                                                               --
--  None                                                                     --
--                                                                           --
-------------------------------------------------------------------------------
with System;					use System;
with Ada.Exceptions;           			use Ada.Exceptions;
with Ada.Tags;					use Ada.Tags;
with Ada.Strings.Unbounded;			use Ada.Strings.Unbounded;
with Ada.Text_IO;				use Ada.Text_IO;
with Ada.Streams.Stream_IO;			use Ada.Streams.Stream_IO;
use  Ada.Streams;

with ODB.Collection;				use ODB.Collection;
with ODB.Entity;				use ODB.Entity;
use  ODB;

with Player;					use Player;

package body Room is

   Version : constant String := "$Id: room.odb,v 1.7 2003/07/07 18:53:58 merdmann Exp $";

   type Handle is access all Object;

   ----------
   -- Game --
   ----------
   function Room(
      This : in Reference ) return Handle is
      -- Verify, that a correct object reference is passed and return the
      -- handle
   begin
      if This = null then
         Raise_Exception(Invalid_Object'Identity, "ROOM - null reference" );
      end if;         
      if This.all'Tag /= Object'Tag then
         Raise_Exception(Invalid_Object'Identity, External_Tag(This.all'Tag) );
      end if;

      return Handle( This );
   end Room;

   ---------------
   -- Room_Name --
   ---------------
   function Room_Name(
      Name : in String ) return String is 
   begin
      return Name & ".Room";
   end Room_Name;

   ------------
   -- Create --
   ------------
   function Create(
      Name   : in String ) return Reference is 
      -- create an instance of the object and all reated objects.
      Result : Reference := Lookup_Object( Room_Name( Name ) );
      H      : Handle;
   begin
      if Result = null then
         Result := new Object;
	 H  := Room( Result );

         Name_Object( Result, Room_Name( Name ) );

         for i in H.Doors'Range loop
            H.Doors(i) := True;
         end loop;

	 H.Name  := To_Unbounded_String( Name );
	 H.Owner := null;
         H.Items := Collection.Create( Room_Name(Name) & ".Items" );
      end if;

      return Result;
   end Create;

   ----------
   -- Name --
   ----------
   procedure Name(
      This  : in Reference;
      aName : in String) is 
      H     : Handle := Room( This );
   begin
      H.Name := To_Unbounded_String( aName );
   end Name;

   ----------
   -- Name --
   ----------
   function Name(
      This  : in Reference ) return String is
      H     : Handle := Room( This );
   begin
      return To_String(H.Name);
   end Name;

   -----------
   -- Owner --
   -----------
   procedure Owner(
      This    : in Reference;
      aPlayer : in Reference) is 
      -- set the owner of a room
      H     : Handle := Room( This );
   begin
      H.Owner := aPlayer;
   end Owner;

   -----------
   -- Owner --
   -----------
   function Owner(
      This  : in Reference ) return Reference is
      H     : Handle := Room( This );
   begin
      return H.Owner;
   end Owner;

   ---------------
   -- Door_Open --
   ---------------
   function Door_Open( 
      This : in Reference;
      Id   : in Door_ID ) return Boolean is
      H    : Handle := Room( This );
   begin
      return H.Doors( Id );
   end Door_Open;

   ---------------
   -- Open_Door --
   ---------------
   procedure Open_Door( 
      This : in Reference;
      Id   : in Door_ID ) is 
      H    : Handle := Room( This );
   begin
      H.Doors( Id ) := True;
   end Open_Door;

   ----------------
   -- Close_Door --
   ----------------
   procedure Close_Door( 
      This : in Reference;
      Id   : in Door_ID ) is
      H    : Handle := Room( This );
   begin
      H.Doors( Id ) := False;
   end Close_Door;

   -----------
   -- Items --
   -----------
   procedure Items(
      This : in Reference;
      Item : in Unbounded_String ) is 
      H    : Handle := Room( This );
   begin
      Collection.Add( H.Items, Entity.Create( To_String(Item) ) );
   end Items;

   -----------
   -- Items --
   -----------
   function Items(
      This : in Reference ) return Reference is 
      H    : Handle := Room( This );
   begin
      return H.Items;
   end Items;
		       
   -------------
   -- Display --
   -------------
   procedure Display( 
      This : in Reference ) is 
      -- display all elements within the room
      R    : Handle := Room(This);
      Item : Element_Array_Access := Contents( R.Items );
   begin
      Put_Line("You are in room " & To_String( R.Name ) );
      if Item /= null and then Item'last > 0 then
         Put( "The room contains");
         for i in Item'Range loop
	    if i+1 in Item'Range then
	       Put(" " & Entity.Name(Item(i)) );
	    elsif Item'Last > 1 then
	       Put(" and " & Entity.Name(Item(i)) );
	    else
	       Put(" " & Entity.Name(Item(i)) );
	    end if;
	 end loop;
	 Put_Line(".");
	 Put_Line("");
      end if;
   end Display;

begin
   Register_Object;   
end Room;
