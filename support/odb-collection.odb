-------------------------------------------------------------------------------
--                                                                           --
--  Filename        : $Source: /cvsroot/gnade/odb/support/odb-collection.odb,v $
--  Version         : $Revision: 1.1 $                                       --
--  Description     : A collection of persistent objects                     --
--  Author          : Michael Erdmann <Michael.Erdmann@snafu.de>             --
--  Created On      : 30-June-2003                                           --
--  Last Modified By: $Author: merdmann $				     --
--  Last Modified On: $Date: 2003/07/20 14:42:33 $                           --
--  Status          : $State: Exp $                                          --
--                                                                           --
--  Copyright (C) 2003 Michael Erdmann                                       --
--                                                                           --
--  ODB is free software;  you can redistribute it  and/or modify it under   --
--  terms of the  GNU General Public License as published  by the Free Soft- --
--  ware  Foundation;  either version 2,  or (at your option) any later ver- --
--  sion.  ODB is distributed in the hope that it will be useful, but WITH-  --
--  OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
--  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --
--  for  more details.  You should have  received  a copy of the GNU General --
--  Public License  distributed with GNAT;  see file COPYING.  If not, write --
--  to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
--  MA 02111-1307, USA.                                                      --
--                                                                           --
--  As a special exception,  if other files  instantiate  generics from this --
--  unit, or you link  this unit with other files  to produce an executable, --
--  this  unit  does not  by itself cause  the resulting  executable  to  be --
--  covered  by the  GNU  General  Public  License.  This exception does not --
--  however invalidate  any other reasons why  the executable file  might be --
--  covered by the  GNU Public License.                                      --
--                                                                           --
--  Functional Description                                                   --
--  ======================                                                   --
--                                                                           --
--  Restrictions                                                             --
--  ============                                                             --
--                                                                           --
--  References                                                               --
--  ==========                                                               --
--  None                                                                     --
--                                                                           --
-------------------------------------------------------------------------------
with Ada.Strings.Unbounded;			use Ada.Strings.Unbounded;
with Ada.Streams.Stream_IO;                     use Ada.Streams.Stream_IO;
with Ada.Streams;                               use Ada.Streams;
with Ada.Tags;     				use Ada.Tags;
with Ada.Text_IO;				use Ada.Text_IO;
with Ada.Exceptions;           			use Ada.Exceptions;
use  Ada;
    
with Unchecked_Deallocation;

with ODB.Classes;				use ODB.Classes;
with ODB.Memory_Stream;				use ODB.Memory_Stream;
use  ODB;

package body ODB.Collection is

   Version : constant String := "$Id: odb-collection.odb,v 1.1 2003/07/20 14:42:33 merdmann Exp $";

   type Handle is access all Object;
   ----------
   -- Free --
   ----------
   procedure Free( 
      Elements : in out Element_Array_Access ) is

      procedure Xree is
         new Unchecked_Deallocation( Element_Array_Type, Element_Array_Access);
   begin
      Xree( Elements );
   end Free;

   ------------
   -- Verify --
   ------------
   function Collection(
      This : in Reference ) return Handle is 
      -- Verify, that a correct object reference is passed and return the 
      -- handle 
   begin
      if This = null then
	 Raise_Exception(Invalid_Object'Identity, "null reference" );
      end if;

      if This.all'Tag /= Object'Tag then
	 Raise_Exception(Invalid_Object'Identity, External_Tag(This.all'Tag) );
      end if;

      return Handle( This );
   end Collection;

   ------------
   -- Create --
   ------------
   function Create( 
      Name   : in String ) return Reference is 
      -- create a collection instance
      Result : Reference := new Object;
      Coll   : Handle    := Handle( Result ); 
   begin
      Coll.Used := 0;
      Coll.Elements := new Element_Array_Type( 1..20 );
      Name_Object( Result, Name );

      return Result;
   end Create;

   -------------
   -- Destroy --
   -------------
   procedure Destroy(
      This : in out Reference ) is 
      Coll : Handle := Collection( This );
   begin
      if Coll.Elements /= null then
         Free( Coll.Elements);
      end if;
      This := null;
   end Destroy;

   --------------------------------
   -- Write_Element_Array_Access --
   --------------------------------
   procedure Write_Element_Array_Access(
      Stream : access Root_Stream_Type'Class;
      Item   : in Element_Array_Access ) is
   begin
      Natural'Output( Stream, Item'Length );
      for i in Item'Range loop
         Reference'Output( Stream, Item(i) );
      end loop;
   end Write_Element_Array_Access ;

   -------------------------------
   -- Read_Element_Array_Access --
   -------------------------------
   function Read_Element_Array_Access(
      Stream : access Root_Stream_Type'Class ) return Element_Array_Access is
      Length : Natural := Natural'Input( Stream );
      Result : Element_Array_Access := new Element_Array_Type(1..Length);
   begin
      for i in 1..Length loop
         Result(i) := Reference'Input(Stream);
      end loop;

      return Result;
   end Read_Element_Array_Access ;

   ---------
   -- Add --
   ---------
   procedure Add( 
      This     : in Reference;
      Item     : in Reference;
      Position : in Natural := 0 ) is 
      -- add a new element to the collection
      Coll : Handle := Collection( This );
   begin
      Coll.Used := Coll.Used + 1;

      if not ( Coll.Used in Coll.Elements'Range ) then
         declare
	    Tmp : Element_Array_Access := new Element_Array_Type( 1..Coll.Used + 20);
	 begin
	    Tmp( 1..Coll.Elements'Last ) := Coll.Elements.all;
	    Free( Coll.Elements );
	    Coll.Elements := Tmp;
	 end ;
      end if;
      Coll.Elements( Coll.Used ) := Item;
   end Add;

   --------------
   -- Contains --
   --------------
   function Contains(
      This    : in Reference;
      Item    : in Reference ) return Boolean is
      -- check if the reference is contained in the collection
      Coll : Handle := Collection( This );
   begin
      for i in 1..Coll.Used loop
        if Coll.Elements(i) = Item then
	   return true;
	end if;
      end loop;

      return false;
   end Contains;

   ----------------------
   -- To_Element_Array --
   ----------------------
   function Contents(
      This     : in Reference ) return Element_Array_Access is
      -- copy the elements from the collection into the target array
      Coll     : Handle  := Collection( This );
      Result   : Element_Array_Access := null;
   begin
      if Coll.Used > 0 then
         Result := new Element_Array_Type( 1..Coll.Used );

	 Result.all := Coll.Elements( 1..Coll.Used );
      end if;

      return Result;
   end Contents;

begin
  Register_Object;
end ODB.Collection;
